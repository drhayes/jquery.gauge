// Generated by CoffeeScript 1.3.3
(function() {
  var __slice = [].slice;

  (function($) {
    var Gauge, defaults;
    defaults = {
      min: 0,
      max: 10,
      current: 0,
      lineWidth: 0.6
    };
    Gauge = (function() {

      function Gauge(options) {
        var settings;
        settings = $.extend({}, defaults, options);
        this.min = settings.min;
        this.max = settings.max;
        this.current = settings.current;
        this.element = settings.element;
        this.lineWidth = settings.lineWidth;
        this.$element = $(this.element);
        this.height = this.$element.height();
        this.width = this.$element.width();
        this.fillStyleColor = this.$element.css('color');
        this.fillStyleBackground = this.$element.css('background-color');
        this.createCanvas();
        this.draw();
      }

      Gauge.prototype.createCanvas = function() {
        this.$canvas = $('<canvas>');
        this.$canvas.height(this.height).width(this.width);
        this.$canvas.attr('height', this.height).attr('width', this.width);
        this.$canvas.appendTo(this.$element);
        this.context = this.$canvas[0].getContext('2d');
        this.context.font = this.$element.css('font');
        this.context.textAlign = 'center';
        this.context.textBaseline = 'middle';
        this.context.fillStyle = this.context.strokeStyle = this.fillStyleColor;
        return this.detectBackground();
      };

      Gauge.prototype.detectBackground = function() {
        var $currentElem, bgAlpha, bgcolor, bgcolorFound, pixelData, _results;
        bgcolorFound = false;
        bgcolor = this.fillStyleBackground;
        $currentElem = this.$element;
        _results = [];
        while (!bgcolorFound) {
          this.context.fillStyle = bgcolor;
          this.context.fillRect(0, 0, 1, 1);
          pixelData = this.context.getImageData(0, 0, 1, 1);
          bgAlpha = pixelData.data[3];
          if (bgAlpha === 0) {
            $currentElem = $currentElem.parent();
            _results.push(bgcolor = $currentElem.css('background-color'));
          } else {
            bgcolorFound = true;
            _results.push(this.fillStyleBackground = bgcolor);
          }
        }
        return _results;
      };

      Gauge.prototype.draw = function() {
        var arcLength, centerX, centerY, radius, ratio, startPoint;
        ratio = this.current / (this.max - this.min);
        if (ratio < 0) {
          ratio = 0;
        }
        if (ratio > 1) {
          ratio = 1;
        }
        arcLength = ratio * 2 * Math.PI;
        centerX = this.width / 2;
        centerY = this.height / 2;
        radius = this.width / 3;
        this.context.lineWidth = radius * this.lineWidth;
        startPoint = -(Math.PI / 2);
        arcLength += startPoint;
        this.context.fillStyle = this.fillStyleBackground;
        this.context.fillRect(0, 0, this.width, this.height);
        this.context.fillStyle = this.fillStyleColor;
        this.context.beginPath();
        this.context.arc(centerX, centerY, radius, startPoint, arcLength);
        this.context.stroke();
        return this.context.fillText('' + this.current, centerX, centerY);
      };

      Gauge.prototype.redraw = function(current, max) {
        this.current = current;
        this.max = max;
        return this.draw();
      };

      return Gauge;

    })();
    return $.fn.gauge = function() {
      var args, options;
      options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.each(function() {
        var gauge;
        if (typeof options === 'string') {
          gauge = $.data(this, 'gauge');
          if (!gauge) {
            console.warn('Attempted to get gauge where there was none.');
          }
          if (options === 'redraw') {
            return gauge.redraw.apply(gauge, args);
          }
        } else if (typeof options === 'object') {
          options = {
            min: options.min,
            max: options.max,
            current: options.current,
            lineWidth: options.lineWidth,
            element: this
          };
          gauge = new Gauge(options);
          return $.data(this, 'gauge', gauge);
        }
      });
    };
  })(jQuery);

}).call(this);
